import lc3b_types::*;

module datapath
(
    input clk,

    /* control signals */
    input pcmux_sel,
     load_pc,
	  load_cc,
	  load_ir,
	  load_regfile,
	  load_mar,
	  load_mdr,
	 storemux_sel,
	 alumux_sel,
	 regfilemux_sel,
	 marmux_sel,
	 mdrmux_sel,
	 input lc3b_aluop aluop,
	 
	 input lc3b_word mem_rdata,
	 output lc3b_opcode  opcode,
    output lc3b_word mem_address,
	 output logic branch_enable,
    output lc3b_word mem_wdata
    /* declare more ports here */
);

/* declare internal signals */
lc3b_word mar_out;
lc3b_word mdr_out;

lc3b_word pcmux_out;
lc3b_word pc_out;
lc3b_word br_add_out;
lc3b_word pc_plus2_out;
lc3b_word sr1_out, sr2_out;
lc3b_word adj6_out, adj9_out;
lc3b_word alumux_out,regfilemux_out,marmux_out, mdrmux_out, alu_out;
lc3b_offset6 offset6;
lc3b_offset9 offset9;
lc3b_reg sr1, sr2, dest, storemux_out;
lc3b_nzp gencc_out, cc_out;
assign mem_wdata = mdr_out;
assign mem_address = mar_out;
/*
 * PC
 */
 always_ff @ (posedge clk)
 begin
 end
 ir ins_reg (.clk,
    .load(load_ir),
    .in(mdr_out),
	 .opcode,
    .dest, .src1(sr1), .src2(sr2),
    .offset6,
    .offset9);
mux2 #(.width(3)) storemux (.sel(storemux_sel),
					.a(sr1),
					.b(dest),
					.f(storemux_out)
						);
mux2 pcmux
(
    .sel(pcmux_sel),
    .a(pc_plus2_out),
    .b(br_add_out),
    .f(pcmux_out)
);

adj #(.width(9)) ofs9(.in(offset9),.out(adj9_out));

adj #(.width(6)) (.in(offset6), .out(adj6_out));

mux2 regfilemux(.sel(regfilemux_sel),.a(alu_out),.b(mdr_out),.f(regfilemux_out));

register pc
(
    .clk,
    .load(load_pc),
    .in(pcmux_out),
    .out(pc_out)
);

br_add b_a (.in(pc_out),.adj9(adj9_out),.out(br_add_out));

gencc gcc (.in(regfilemux_out),.out(gencc_out));
plus2 pcpls2 (.in(pc_out),
					.out(pc_plus2_out)
					);
	regfile regf (.clk,
    .load(load_regfile),
    .in(regfilemux_out),
    .src_a(storemux_out), 
	 .src_b(sr2), 
	 .dest,
    .reg_a(sr1_out), 
	 .reg_b(sr2_out));
	 
register #(.width(3)) cc (.clk, 
             .load(load_cc),
				 .in(gencc_out),
				 .out(cc_out));

mux2 alumux (.sel(alumux_sel),
				 .a(sr2_out),
				 .b(adj6_out),
				 .f(alumux_out));
				 
mux2 mdrmux (.sel(mdrmux_sel),
				 .a(alu_out),
				 .b(mem_rdata),
				 .f(mdrmux_out));
				 
mux2 marmux (.sel(marmux_sel),
				 .a(alu_out),
				 .b(pc_out),
				 .f(marmux_out));
				 
register mar (.clk,
				  .load(load_mar),
				  .in(marmux_out),
				  .out(mar_out));

register mdr (.clk,
				  .load(load_mdr),
				  .in(mdrmux_out),
				  .out(mdr_out));
alu sgalu (.aluop,
    .a(sr1_out), .b(alumux_out),
    .f(alu_out));
cccomp cmpcc (.cc_in(cc_out),
				  .NZP_in(dest),
				  .branch_enable);
endmodule : datapath
